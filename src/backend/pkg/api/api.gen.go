// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Message defines model for Message.
type Message struct {
	ChannelId *string    `json:"channel_id,omitempty"`
	Content   *string    `json:"content,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Sender    *string    `json:"sender,omitempty"`
	SentAt    *time.Time `json:"sent_at,omitempty"`
	Uid       *string    `json:"uid,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// MessageCreate defines model for MessageCreate.
type MessageCreate struct {
	ChannelId string    `json:"channel_id"`
	Content   string    `json:"content"`
	Sender    string    `json:"sender"`
	SentAt    time.Time `json:"sent_at"`
	Uid       string    `json:"uid"`
}

// Token defines model for Token.
type Token struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
	Id        *string    `json:"id,omitempty"`

	// Name Token identifier name
	Name      *string    `json:"name,omitempty"`
	Token     *string    `json:"token,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// TokenCreate defines model for TokenCreate.
type TokenCreate struct {
	// ExpiresIn Token expiration period in seconds
	ExpiresIn *int `json:"expires_in,omitempty"`

	// Name Token identifier name
	Name string `json:"name"`
}

// TokenResponse defines model for TokenResponse.
type TokenResponse struct {
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
	Id        *string    `json:"id,omitempty"`
	Name      *string    `json:"name,omitempty"`
	Token     *string    `json:"token,omitempty"`
}

// GetApiMessagesSearchParams defines parameters for GetApiMessagesSearch.
type GetApiMessagesSearchParams struct {
	ChannelId *string    `form:"channel_id,omitempty" json:"channel_id,omitempty"`
	Sender    *string    `form:"sender,omitempty" json:"sender,omitempty"`
	FromDate  *time.Time `form:"from_date,omitempty" json:"from_date,omitempty"`
	ToDate    *time.Time `form:"to_date,omitempty" json:"to_date,omitempty"`
}

// PostApiMessagesJSONRequestBody defines body for PostApiMessages for application/json ContentType.
type PostApiMessagesJSONRequestBody = MessageCreate

// PostApiTokensJSONRequestBody defines body for PostApiTokens for application/json ContentType.
type PostApiTokensJSONRequestBody = TokenCreate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create message
	// (POST /api/messages)
	PostApiMessages(c *gin.Context)
	// Search messages
	// (GET /api/messages/search)
	GetApiMessagesSearch(c *gin.Context, params GetApiMessagesSearchParams)
	// Delete message
	// (DELETE /api/messages/{uid})
	DeleteApiMessagesUid(c *gin.Context, uid string)
	// Get token list
	// (GET /api/tokens)
	GetApiTokens(c *gin.Context)
	// Create new token
	// (POST /api/tokens)
	PostApiTokens(c *gin.Context)
	// Invalidate token
	// (DELETE /api/tokens/{id})
	DeleteApiTokensId(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostApiMessages operation middleware
func (siw *ServerInterfaceWrapper) PostApiMessages(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiMessages(c)
}

// GetApiMessagesSearch operation middleware
func (siw *ServerInterfaceWrapper) GetApiMessagesSearch(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiMessagesSearchParams

	// ------------- Optional query parameter "channel_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "channel_id", c.Request.URL.Query(), &params.ChannelId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter channel_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sender" -------------

	err = runtime.BindQueryParameter("form", true, false, "sender", c.Request.URL.Query(), &params.Sender)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sender: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "from_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "from_date", c.Request.URL.Query(), &params.FromDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter from_date: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "to_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "to_date", c.Request.URL.Query(), &params.ToDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter to_date: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiMessagesSearch(c, params)
}

// DeleteApiMessagesUid operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiMessagesUid(c *gin.Context) {

	var err error

	// ------------- Path parameter "uid" -------------
	var uid string

	err = runtime.BindStyledParameter("simple", false, "uid", c.Param("uid"), &uid)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter uid: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteApiMessagesUid(c, uid)
}

// GetApiTokens operation middleware
func (siw *ServerInterfaceWrapper) GetApiTokens(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiTokens(c)
}

// PostApiTokens operation middleware
func (siw *ServerInterfaceWrapper) PostApiTokens(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiTokens(c)
}

// DeleteApiTokensId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiTokensId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteApiTokensId(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/api/messages", wrapper.PostApiMessages)
	router.GET(options.BaseURL+"/api/messages/search", wrapper.GetApiMessagesSearch)
	router.DELETE(options.BaseURL+"/api/messages/:uid", wrapper.DeleteApiMessagesUid)
	router.GET(options.BaseURL+"/api/tokens", wrapper.GetApiTokens)
	router.POST(options.BaseURL+"/api/tokens", wrapper.PostApiTokens)
	router.DELETE(options.BaseURL+"/api/tokens/:id", wrapper.DeleteApiTokensId)
}

type PostApiMessagesRequestObject struct {
	Body *PostApiMessagesJSONRequestBody
}

type PostApiMessagesResponseObject interface {
	VisitPostApiMessagesResponse(w http.ResponseWriter) error
}

type PostApiMessages201JSONResponse Message

func (response PostApiMessages201JSONResponse) VisitPostApiMessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostApiMessages400Response struct {
}

func (response PostApiMessages400Response) VisitPostApiMessagesResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostApiMessages401Response struct {
}

func (response PostApiMessages401Response) VisitPostApiMessagesResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetApiMessagesSearchRequestObject struct {
	Params GetApiMessagesSearchParams
}

type GetApiMessagesSearchResponseObject interface {
	VisitGetApiMessagesSearchResponse(w http.ResponseWriter) error
}

type GetApiMessagesSearch200JSONResponse []Message

func (response GetApiMessagesSearch200JSONResponse) VisitGetApiMessagesSearchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiMessagesSearch401Response struct {
}

func (response GetApiMessagesSearch401Response) VisitGetApiMessagesSearchResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteApiMessagesUidRequestObject struct {
	Uid string `json:"uid"`
}

type DeleteApiMessagesUidResponseObject interface {
	VisitDeleteApiMessagesUidResponse(w http.ResponseWriter) error
}

type DeleteApiMessagesUid204Response struct {
}

func (response DeleteApiMessagesUid204Response) VisitDeleteApiMessagesUidResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteApiMessagesUid401Response struct {
}

func (response DeleteApiMessagesUid401Response) VisitDeleteApiMessagesUidResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteApiMessagesUid404Response struct {
}

func (response DeleteApiMessagesUid404Response) VisitDeleteApiMessagesUidResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetApiTokensRequestObject struct {
}

type GetApiTokensResponseObject interface {
	VisitGetApiTokensResponse(w http.ResponseWriter) error
}

type GetApiTokens200JSONResponse []Token

func (response GetApiTokens200JSONResponse) VisitGetApiTokensResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiTokens401Response struct {
}

func (response GetApiTokens401Response) VisitGetApiTokensResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostApiTokensRequestObject struct {
	Body *PostApiTokensJSONRequestBody
}

type PostApiTokensResponseObject interface {
	VisitPostApiTokensResponse(w http.ResponseWriter) error
}

type PostApiTokens201JSONResponse TokenResponse

func (response PostApiTokens201JSONResponse) VisitPostApiTokensResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostApiTokens400Response struct {
}

func (response PostApiTokens400Response) VisitPostApiTokensResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteApiTokensIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteApiTokensIdResponseObject interface {
	VisitDeleteApiTokensIdResponse(w http.ResponseWriter) error
}

type DeleteApiTokensId204Response struct {
}

func (response DeleteApiTokensId204Response) VisitDeleteApiTokensIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteApiTokensId401Response struct {
}

func (response DeleteApiTokensId401Response) VisitDeleteApiTokensIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteApiTokensId404Response struct {
}

func (response DeleteApiTokensId404Response) VisitDeleteApiTokensIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Create message
	// (POST /api/messages)
	PostApiMessages(ctx context.Context, request PostApiMessagesRequestObject) (PostApiMessagesResponseObject, error)
	// Search messages
	// (GET /api/messages/search)
	GetApiMessagesSearch(ctx context.Context, request GetApiMessagesSearchRequestObject) (GetApiMessagesSearchResponseObject, error)
	// Delete message
	// (DELETE /api/messages/{uid})
	DeleteApiMessagesUid(ctx context.Context, request DeleteApiMessagesUidRequestObject) (DeleteApiMessagesUidResponseObject, error)
	// Get token list
	// (GET /api/tokens)
	GetApiTokens(ctx context.Context, request GetApiTokensRequestObject) (GetApiTokensResponseObject, error)
	// Create new token
	// (POST /api/tokens)
	PostApiTokens(ctx context.Context, request PostApiTokensRequestObject) (PostApiTokensResponseObject, error)
	// Invalidate token
	// (DELETE /api/tokens/{id})
	DeleteApiTokensId(ctx context.Context, request DeleteApiTokensIdRequestObject) (DeleteApiTokensIdResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostApiMessages operation middleware
func (sh *strictHandler) PostApiMessages(ctx *gin.Context) {
	var request PostApiMessagesRequestObject

	var body PostApiMessagesJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiMessages(ctx, request.(PostApiMessagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiMessages")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostApiMessagesResponseObject); ok {
		if err := validResponse.VisitPostApiMessagesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiMessagesSearch operation middleware
func (sh *strictHandler) GetApiMessagesSearch(ctx *gin.Context, params GetApiMessagesSearchParams) {
	var request GetApiMessagesSearchRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiMessagesSearch(ctx, request.(GetApiMessagesSearchRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiMessagesSearch")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiMessagesSearchResponseObject); ok {
		if err := validResponse.VisitGetApiMessagesSearchResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteApiMessagesUid operation middleware
func (sh *strictHandler) DeleteApiMessagesUid(ctx *gin.Context, uid string) {
	var request DeleteApiMessagesUidRequestObject

	request.Uid = uid

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteApiMessagesUid(ctx, request.(DeleteApiMessagesUidRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteApiMessagesUid")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteApiMessagesUidResponseObject); ok {
		if err := validResponse.VisitDeleteApiMessagesUidResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiTokens operation middleware
func (sh *strictHandler) GetApiTokens(ctx *gin.Context) {
	var request GetApiTokensRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiTokens(ctx, request.(GetApiTokensRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiTokens")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiTokensResponseObject); ok {
		if err := validResponse.VisitGetApiTokensResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiTokens operation middleware
func (sh *strictHandler) PostApiTokens(ctx *gin.Context) {
	var request PostApiTokensRequestObject

	var body PostApiTokensJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiTokens(ctx, request.(PostApiTokensRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiTokens")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostApiTokensResponseObject); ok {
		if err := validResponse.VisitPostApiTokensResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteApiTokensId operation middleware
func (sh *strictHandler) DeleteApiTokensId(ctx *gin.Context, id string) {
	var request DeleteApiTokensIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteApiTokensId(ctx, request.(DeleteApiTokensIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteApiTokensId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteApiTokensIdResponseObject); ok {
		if err := validResponse.VisitDeleteApiTokensIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xW32/bNhD+Vwhuj1qtZN3D9JauQ2FgBYKlfQqMgJVONjuJZHmnbEag/30gqR9WRLt2",
	"YvdNpsm74/d9/O6eeK5roxUoQp49ccw3UAv/+REQxRrcp7HagCUJ/o98I5SC6kEW7hdtDfCMI1mp1rxN",
	"eK4VgaL4fxYEQfEg/N+ltrX74oUg+IVkDTyZn0FQBdhoOARFJ8Vq9tTcmOLEutphRX/5Cjm5KB1if/hL",
	"nhW3y2PQJtzCt0ZaKHh27zeNsYcCkt1LjCWvImB80v+AioDwAgXAf0ZawJPO7AFZidozUwDmVhqSWvEs",
	"1MpkAYpkKcEyvy0SlfpLXUhBvpB9+ulhkCrcoBRNRTy7/u336zRNk+id/BnhlpgBK3XBpGIIuVYFjiVJ",
	"RbAG+2qAnonIb9qrjb8BjVZ44KJn5PtoJues+DeWN1bS9s65Y6jxHQgL9qahzWCb7tAXvzwWuCEyvHUx",
	"pCr1HNib2yUrtWW1UGIt1ZrVwUOQCVUwX6TnSVLlwnUOw+7APsoc2M3tkif8ESyGcFdv0jepu542oISR",
	"POO/+qWEG0EbX/lCGLno03jwNXqgHQVeKsuCZ/xWI90Y+bHfGKgFpHe62PqXPPqVMKaSuT+7+IpajZ3E",
	"ff1soeQZ/2kxtppF12cWU8tspwoi24BfCELxxV6nV+dOHtJOeemB7uyKYZPngFg2VbV1+L5N0zmZS/Uo",
	"KlmwDqiw7ypCekMb95JC0Wy48K7UeHY/Fdn9ql0lHJu6FnbLMx4g6/XiNCLW6F7dQO3KxZuwvUAQNveK",
	"XUOE8w+wS/ld2OykY0UNBBZ9Vc5/+LcG7Jb3D2zaFkb0Z48rfnroLiefLK2uH5wxTA4fZ7/xiKRfGG81",
	"U2p6klIlQY1HS3bIL6wV25iEA33MAjYV4WXF2OWqR7M4Ro1PjSzaUFEFoeNN9fjer+9I8rPX1zM9xl/u",
	"5+V7Rpp1oZPAtTPBkeow5Ez95pAG5wy/nePZ5w+JY85xCglu/4EkShMrdaNOpCvgepx3dD3osGV86hvV",
	"5V9AmCuP0P9fEonpsm+iF9X/B6CQh1USaQfQLvmqTQ632R0Az99kd6fKH9xip5NehKUwWb6uzbaRvqjg",
	"38BIjIypthdPx9pQYGn5XQ8KlwoGJEO1Yp8JXcKDunF9yHwhFwppXuhBy6G6Azx9P2B35nlpf6rCaKkI",
	"w3Td2aWfsqF2qh7wHyzPDQSHgogpOuG5xyL2hrNq/w8AAP//4+m5jV4RAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
