// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// Message defines model for Message.
type Message struct {
	ChannelId *string    `json:"channel_id,omitempty"`
	Content   *string    `json:"content,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Id        *uint      `json:"id,omitempty"`
	Sender    *string    `json:"sender,omitempty"`
	SentAt    *time.Time `json:"sent_at,omitempty"`
	Uid       *string    `json:"uid,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// MessageCreate defines model for MessageCreate.
type MessageCreate struct {
	ChannelId string    `json:"channel_id"`
	Content   string    `json:"content"`
	Sender    string    `json:"sender"`
	SentAt    time.Time `json:"sent_at"`
	Uid       string    `json:"uid"`
}

// GetApiMessageSearchParams defines parameters for GetApiMessageSearch.
type GetApiMessageSearchParams struct {
	ChannelId *string    `form:"channel_id,omitempty" json:"channel_id,omitempty"`
	Sender    *string    `form:"sender,omitempty" json:"sender,omitempty"`
	FromDate  *time.Time `form:"from_date,omitempty" json:"from_date,omitempty"`
	ToDate    *time.Time `form:"to_date,omitempty" json:"to_date,omitempty"`
}

// PostApiMessageJSONRequestBody defines body for PostApiMessage for application/json ContentType.
type PostApiMessageJSONRequestBody = MessageCreate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// メッセージ登録
	// (POST /api/message)
	PostApiMessage(c *gin.Context)
	// メッセージ検索
	// (GET /api/message/search)
	GetApiMessageSearch(c *gin.Context, params GetApiMessageSearchParams)
	// メッセージ削除
	// (DELETE /api/message/{uid})
	DeleteApiMessageUid(c *gin.Context, uid string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostApiMessage operation middleware
func (siw *ServerInterfaceWrapper) PostApiMessage(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiMessage(c)
}

// GetApiMessageSearch operation middleware
func (siw *ServerInterfaceWrapper) GetApiMessageSearch(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiMessageSearchParams

	// ------------- Optional query parameter "channel_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "channel_id", c.Request.URL.Query(), &params.ChannelId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter channel_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sender" -------------

	err = runtime.BindQueryParameter("form", true, false, "sender", c.Request.URL.Query(), &params.Sender)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sender: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "from_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "from_date", c.Request.URL.Query(), &params.FromDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter from_date: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "to_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "to_date", c.Request.URL.Query(), &params.ToDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter to_date: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiMessageSearch(c, params)
}

// DeleteApiMessageUid operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiMessageUid(c *gin.Context) {

	var err error

	// ------------- Path parameter "uid" -------------
	var uid string

	err = runtime.BindStyledParameter("simple", false, "uid", c.Param("uid"), &uid)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter uid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteApiMessageUid(c, uid)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/api/message", wrapper.PostApiMessage)
	router.GET(options.BaseURL+"/api/message/search", wrapper.GetApiMessageSearch)
	router.DELETE(options.BaseURL+"/api/message/:uid", wrapper.DeleteApiMessageUid)
}

type PostApiMessageRequestObject struct {
	Body *PostApiMessageJSONRequestBody
}

type PostApiMessageResponseObject interface {
	VisitPostApiMessageResponse(w http.ResponseWriter) error
}

type PostApiMessage201JSONResponse Message

func (response PostApiMessage201JSONResponse) VisitPostApiMessageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostApiMessage400Response struct {
}

func (response PostApiMessage400Response) VisitPostApiMessageResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetApiMessageSearchRequestObject struct {
	Params GetApiMessageSearchParams
}

type GetApiMessageSearchResponseObject interface {
	VisitGetApiMessageSearchResponse(w http.ResponseWriter) error
}

type GetApiMessageSearch200JSONResponse []Message

func (response GetApiMessageSearch200JSONResponse) VisitGetApiMessageSearchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteApiMessageUidRequestObject struct {
	Uid string `json:"uid"`
}

type DeleteApiMessageUidResponseObject interface {
	VisitDeleteApiMessageUidResponse(w http.ResponseWriter) error
}

type DeleteApiMessageUid204Response struct {
}

func (response DeleteApiMessageUid204Response) VisitDeleteApiMessageUidResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteApiMessageUid404Response struct {
}

func (response DeleteApiMessageUid404Response) VisitDeleteApiMessageUidResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// メッセージ登録
	// (POST /api/message)
	PostApiMessage(ctx context.Context, request PostApiMessageRequestObject) (PostApiMessageResponseObject, error)
	// メッセージ検索
	// (GET /api/message/search)
	GetApiMessageSearch(ctx context.Context, request GetApiMessageSearchRequestObject) (GetApiMessageSearchResponseObject, error)
	// メッセージ削除
	// (DELETE /api/message/{uid})
	DeleteApiMessageUid(ctx context.Context, request DeleteApiMessageUidRequestObject) (DeleteApiMessageUidResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostApiMessage operation middleware
func (sh *strictHandler) PostApiMessage(ctx *gin.Context) {
	var request PostApiMessageRequestObject

	var body PostApiMessageJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiMessage(ctx, request.(PostApiMessageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiMessage")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostApiMessageResponseObject); ok {
		if err := validResponse.VisitPostApiMessageResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiMessageSearch operation middleware
func (sh *strictHandler) GetApiMessageSearch(ctx *gin.Context, params GetApiMessageSearchParams) {
	var request GetApiMessageSearchRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiMessageSearch(ctx, request.(GetApiMessageSearchRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiMessageSearch")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiMessageSearchResponseObject); ok {
		if err := validResponse.VisitGetApiMessageSearchResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteApiMessageUid operation middleware
func (sh *strictHandler) DeleteApiMessageUid(ctx *gin.Context, uid string) {
	var request DeleteApiMessageUidRequestObject

	request.Uid = uid

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteApiMessageUid(ctx, request.(DeleteApiMessageUidRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteApiMessageUid")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteApiMessageUidResponseObject); ok {
		if err := validResponse.VisitDeleteApiMessageUidResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RUQUscTRD9K0t933HiromnuZkIYQ8BQTyJSGemdrdlp3vs7hGWZQ8zm0OiHgIhBIkk",
	"GCQED5GEBCIG/0yjq/8idLfu7GQm4gZz6+mpqlf93qvqQ8CjmDNkSoLfBxl0MCL2+ASlJG00x1jwGIWi",
	"aH8EHcIYdtdoaL5UL0bwQSpBWRsGHgScKWSq+p9AojBcI/Z3i4vInCAkCu8pGiF45RwHM45NKFN5GGUK",
	"2yhMnEQWoqiElcjUVJjJH96WxOGU/Q/GN/zpOgbKVLli9pEl4075/fccDDwQuJFQgSH4KzYorz1uwJt8",
	"RN7yaokMU4+yFjdIIcpA0FhRzsCH+cVmrcVFLSKMtClr1yLHmjS9UtU1Va6IrC2h2KQB1uYXm+DBJgrp",
	"aszONGYa5i08RkZiCj48sFcexER1LNt1EtN6NOF1Li1JRhFiemmG4MMil2o+ptcz4UhAqR7ysGc1y0Uh",
	"cdylgU2tr0vTx/VYmdP/Alvgw3/1fO7qV0NXL/piUORaiQTthYw5k84p9xuzdw3uYItS6OG+Hg51dqKH",
	"P3X2Q6c7o92Ty52vOn2tsx2dnur0jU7fG6LnGo2ylKNn+2dbxzo91MNDnR3p7JPOjvXwuXWTTKKIiF4Z",
	"xmHYmEmN6hKJCDoGpY0VSj3GCaGWXKyRW5AIFQoJ/kofqGlrI0HRAw8YiYyZCo7NOSv5vzp7bPypM1uC",
	"R2tmEgvJt9st1RUV/8t6qyV/NabyF1UYyVsbbYxPhCC9KuOdH+yNvn0YfX95/m7vZrO4yLJZ+gkNB86R",
	"XXTLtmiXBXufO2bZyv+bXYpdnb3Yutw9ODs6vfiyXxqNz8vNBfCcLGbH5Kq4VVkc6JvsUhZjrjxa5dF0",
	"3VWO5q3yLz5u6/RAp9s627L5b3X26mbyHaQRcPArAAD//7GyjAdQCAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
